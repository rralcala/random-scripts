/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef price_TYPES_H
#define price_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace tutorial {

typedef struct _Item__isset {
  _Item__isset() : id(true), name(false), barcode(true), price(true) {}
  bool id;
  bool name;
  bool barcode;
  bool price;
} _Item__isset;

class Item {
 public:

  static const char* ascii_fingerprint; // = "0655A6BBC993E275D502CB0742593539";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x55,0xA6,0xBB,0xC9,0x93,0xE2,0x75,0xD5,0x02,0xCB,0x07,0x42,0x59,0x35,0x39};

  Item() : id(0), name(), barcode("None"), price(0) {
  }

  virtual ~Item() throw() {}

  int32_t id;
  std::string name;
  std::string barcode;
  double price;

  _Item__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_barcode(const std::string& val) {
    barcode = val;
  }

  void __set_price(const double val) {
    price = val;
  }

  bool operator == (const Item & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(barcode == rhs.barcode))
      return false;
    if (!(price == rhs.price))
      return false;
    return true;
  }
  bool operator != (const Item &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Item & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Item &a, Item &b);

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : what(false), why(false) {}
  bool what;
  bool why;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  InvalidOperation() : what(0), why() {
  }

  virtual ~InvalidOperation() throw() {}

  int32_t what;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_what(const int32_t val) {
    what = val;
  }

  void __set_why(const std::string& val) {
    why = val;
  }

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InvalidOperation &a, InvalidOperation &b);

} // namespace

#endif
